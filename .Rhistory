
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame
(
categoryId = categoryId,
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
df = Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
df = Get_Video_Category("22","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#testing1
df = Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#testing2
df = Get_Video_Category("22","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
library(httr)
library(jsonlite)
library(stringr)
#' Helps to Extract Time in minutes
#' The YouTube time period follows ISO 8601 time that looks like PT1H45M35S
#' This method helps to extract time from above mentioned format to minutes
#' For instance:
#' PT1H30M30S is converted to 90.5 minutes using regex
#'
#' @param input : time in ISO 8601 format
#' @return time in minutes
#' @export
#' @examples PT1H30M30S is Period of Time 1 Hour, 30 Minutes and 30 Seconds
Extract_Time_in_mins<-function(input)
{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
print(paste0(h,":",m,":",s))
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id : id of a video or comma seperated ids of a video
#' @param api_key: api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples url: https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=[videoid(s)]&key=[key]
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
source("~/YTExploreR/R/video_category_util.R")
library(httr)
library(jsonlite)
library(stringr)
#' Helps to Extract Time in minutes
#' The YouTube time period follows ISO 8601 time that looks like PT1H45M35S
#' This method helps to extract time from above mentioned format to minutes
#' For instance:
#' PT1H30M30S is converted to 90.5 minutes using regex
#'
#' @param input : time in ISO 8601 format
#' @return time in minutes
#' @export
#' @examples PT1H30M30S is Period of Time 1 Hour, 30 Minutes and 30 Seconds
Extract_Time_in_mins<-function(input)
{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
print(paste0(h,":",m,":",s))
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id : id of a video or comma seperated ids of a video
#' @param api_key: api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples url: https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=[videoid(s)]&key=[key]
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
publishedyear <- format(publishedAt, "%Y")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
publishedyear = publishedyear,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#' Title
#'
#' @param channelid
#'
#' @return
#' @export
#'
#' @examples
#' @include YTExploreR_get_uploads.R

get_top10_videos<-function(channelid)
{
videos = get_uploads(channelid)
print(videos)
}
get_top10_videos("UCtYLUTtgS3k1Fg4y5tAhLbw")
devtools::build()
devtools::build()
usethis::use_roxygen_md()
devtools::build()
library(httr)
library(jsonlite)
#' get_upload_activity
#'
#' @param chan_id
#'
#' @return
#' @export
#'
#' @examples
get_uploads <- function(chan_id) {
api_key <- Sys.getenv("YOUTUBE_API")
params <- list(
part = 'snippet',
channelId = chan_id,
maxResults = 50,
key = api_key
)
url <- 'https://youtube.googleapis.com/youtube/v3/activities?'
r1 <- GET(url, query = params)
if (status_code(r1) != 200) {
stop('Request was not successful!')
}
response_data <- content(r1, "parsed")
uploads_df <- map_df(response_data$items, ~ data.frame(
publishedAt = .x$snippet$publishedAt,
channelId = .x$snippet$channelId,
title = .x$snippet$title,
description = .x$snippet$description,
channelTitle = .x$snippet$channelTitle,
type = .x$snippet$type
))
return(uploads_df)
}
result_df <- get_uploads('UCqFzWxSCi39LnW1JKFR3efg')
get_uploads <- function(chan_id) {
api_key <- Sys.getenv("YOUTUBE_API")
params <- list(
part = 'snippet',
channelId = chan_id,
maxResults = 50,
key = api_key
)
url <- 'https://youtube.googleapis.com/youtube/v3/activities?'
r1 <- GET(url, query = params)
if (status_code(r1) != 200) {
stop('Request was not successful!')
}
response_data <- content(r1, "parsed")
uploads_df <- map_df(response_data$items, ~ data.frame(
publishedAt = .x$snippet$publishedAt,
channelId = .x$snippet$channelId,
title = .x$snippet$title,
description = .x$snippet$description,
channelTitle = .x$snippet$channelTitle,
type = .x$snippet$type
))
return(uploads_df)
}
result_df <- get_uploads('UCqFzWxSCi39LnW1JKFR3efg')
library(httr)
library(jsonlite)
library(stringr)
#' Helps to Extract Time in minutes
#' The YouTube time period follows ISO 8601 time that looks like PT1H45M35S
#' This method helps to extract time from above mentioned format to minutes
#' For instance:
#' PT1H30M30S is converted to 90.5 minutes using regex
#'
#' @param input  time in ISO 8601 format
#' @return time in minutes
#' @export
#' @examples Extract_Time_in_mins("PT1H30M30S")
Extract_Time_in_mins<-function(input)
{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id id of a video or comma seperated ids of a video
#' @param api_key api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
publishedyear <- format(publishedAt, "%Y")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
publishedyear = publishedyear,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df

source("~/YTExploreR/R/display_individual_channel_stats.R")
t_channel_stats %>%
kbl(caption = "Channel statistics:") %>%
kable_classic(full_width = F, html_font = "Cambria")
colnames(channel_stats)
# Load libraries
library(knitr)
library(kableExtra)
# Load your custom functions
source("/Users/nayemontiel18/YTExploreR/R/get_channel_stats.R")
# Providing a valid API Key and channel ids
api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
# Specifying a unique channel id
channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
# Call function to retrieve channel statistics data frame
channel_stats <- get_channel_stats(api_key, channel_id)
channel_stats
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers',
'Number of views',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
channel_stats
t_channel_stats <- t(channel_stats[,-6 ])
t_channel_stats
t_channel_stats %>%
kbl(caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
round(channel_stats$`Engagement ratio`,3)
round(channel_stats$`Engagement ratio`,0)
# Load libraries
library(knitr)
library(kableExtra)
# Load your custom functions
source("/Users/nayemontiel18/YTExploreR/R/get_channel_stats.R")
# Providing a valid API Key and channel ids
api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
# Specifying a unique channel id
channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
# Call function to retrieve channel statistics data frame
channel_stats <- get_channel_stats(api_key, channel_id)
display_channel_info <- function(channel_stats){
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers',
'Number of views',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
channel_stats$`Engagement ratio` <- round(channel_stats$`Engagement ratio`, 0)
# Eliminate playlistId
table_channel_stats <- t(channel_stats[,-6 ])
# Create a Markdown-formatted table with a title
table_channel_stats %>%
kbl(caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info()
display_channel_info(channel_stats = )
display_channel_info(channel_stats)
display_channel_info <- function(channel_stats) {
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers',
'Number of views',
'Total videos',
'Country',
'Thumbnails',
'Engagement ratio')
channel_stats$`Engagement ratio` <- round(channel_stats$`Engagement ratio`, 0)
# Eliminate playlistId
table_channel_stats <- channel_stats[, -6]
# Create a Markdown-formatted table with a title
kable(table_channel_stats, caption = "Channel information:") %>%
kable_styling(full_width = FALSE, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
# Load libraries
library(knitr)
library(kableExtra)
# Load your custom functions
source("/Users/nayemontiel18/YTExploreR/R/get_channel_stats.R")
# Providing a valid API Key and channel ids
api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
# Specifying a unique channel id
channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
# Call function to retrieve channel statistics data frame
channel_stats <- get_channel_stats(api_key, channel_id)
display_channel_info <- function(channel_stats) {
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers',
'Number of views',
'Total videos',
'Country',
'Thumbnails',
'Engagement ratio')
channel_stats$`Engagement ratio` <- round(channel_stats$`Engagement ratio`, 0)
# Eliminate playlistId
table_channel_stats <- channel_stats[, -6]
# Create a Markdown-formatted table with a title
kable(table_channel_stats, caption = "Channel information:") %>%
kable_styling(full_width = FALSE, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
source("~/YTExploreR/R/display_individual_channel_stats.R")
display_channel_info(channel_stats)
display_channel_info(channel_stats)
source("~/YTExploreR/R/display_individual_channel_stats.R")
display_channel_info(channel_stats)
source("~/YTExploreR/R/display_individual_channel_stats.R")
display_channel_info(channel_stats)
source("~/YTExploreR/R/display_individual_channel_stats.R")
display_channel_info(channel_stats)
source("~/YTExploreR/R/display_individual_channel_stats.R")
display_channel_info(channel_stats)
# Load libraries
library(knitr)
library(kableExtra)
# Load your custom functions
source("/Users/nayemontiel18/YTExploreR/R/get_channel_stats.R")
api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
channel_stats <- get_channel_stats(api_key, channel_id)
#'
#' @examples
#' # Providing a valid API Key and channel ids
#' api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
#' # Specifying a unique channel id
#' channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
#' # Call function to retrieve channel statistics data frame
#' channel_stats <- get_channel_stats(api_key, channel_id)
#' # Call the function to display the table with the channel statistics
#' display_channel_info(channel_stats)
display_channel_info <- function(channel_stats){
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thusands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
channel_stats$`Engagement ratio` <- round(channel_stats$`Engagement ratio`, 0)
channel_stats$numberSubscribers <- channel_stats$numberSubscribers / 1000
channel_stats$numberViews <- channel_stats$numberViews / 1000
# Create a Markdown-formatted table with a title
table_channel_stats <-  kbl(t(channel_stats[,-6]), caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
#'
#' @examples
#' # Providing a valid API Key and channel ids
#' api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
#' # Specifying a unique channel id
#' channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
#' # Call function to retrieve channel statistics data frame
#' channel_stats <- get_channel_stats(api_key, channel_id)
#' # Call the function to display the table with the channel statistics
#' display_channel_info(channel_stats)
display_channel_info <- function(channel_stats){
channel_stats$engagement_ratio <- round(channel_stats$engagement_ratio, 0)
channel_stats$numberSubscribers <- channel_stats$numberSubscribers / 1000
channel_stats$numberViews <- channel_stats$numberViews / 1000
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thusands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
# Create a Markdown-formatted table with a title
table_channel_stats <-  kbl(t(channel_stats[,-6]), caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thousands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
display_channel_info(channel_stats)
#'
#' @examples
#' # Providing a valid API Key and channel ids
#' api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
#' # Specifying a unique channel id
#' channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
#' # Call function to retrieve channel statistics data frame
#' channel_stats <- get_channel_stats(api_key, channel_id)
#' # Call the function to display the table with the channel statistics
#' display_channel_info(channel_stats)
display_channel_info <- function(channel_stats){
channel_stats$engagement_ratio <- round(channel_stats$engagement_ratio, 0)
channel_stats$numberSubscribers <- channel_stats$numberSubscribers / 1000
channel_stats$numberViews <- channel_stats$numberViews / 1000
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thousands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
# Create a Markdown-formatted table with a title
table_channel_stats <-  kbl(t(channel_stats[,-6]), caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
#'
#' @examples
#' # Providing a valid API Key and channel ids
#' api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
#' # Specifying a unique channel id
#' channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
#' # Call function to retrieve channel statistics data frame
#' channel_stats <- get_channel_stats(api_key, channel_id)
#' # Call the function to display the table with the channel statistics
#' display_channel_info(channel_stats)
display_channel_info <- function(channel_stats){
channel_stats$engagement_ratio <- round(channel_stats$engagement_ratio, 0)
channel_stats$numberSubscribers <- channel_stats$numberSubscribers / 1000
channel_stats$numberViews <- channel_stats$numberViews / 1000
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thousands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
# Create a Markdown-formatted table with a title
table_channel_stats <-  kbl(t(channel_stats[,-6]), caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
channel_stats <- get_channel_stats(api_key, channel_id)
# Load your custom functions
source("/Users/nayemontiel18/YTExploreR/R/get_channel_stats.R")
channel_stats <- get_channel_stats(api_key, channel_id)
# Load libraries
library(knitr)
library(kableExtra)
display_channel_info(channel_stats)
channel_stats$numberSubscribers
channel_stats$numberViews
channel_stats$numberViews/1000
#'
#' @examples
#' # Providing a valid API Key and channel ids
#' api_key <- "AIzaSyB6df_K1PJy64w5VLZGYWyXSPYJ-TOoXVw"
#' # Specifying a unique channel id
#' channel_id = c('UC2UXDak6o7rBm23k3Vv5dww') # Tina Huang
#' # Call function to retrieve channel statistics data frame
#' channel_stats <- get_channel_stats(api_key, channel_id)
#' # Call the function to display the table with the channel statistics
#' display_channel_info(channel_stats)
display_channel_info <- function(channel_stats){
channel_stats$engagement_ratio <- round(channel_stats$engagement_ratio, 0)
channel_stats$numberSubscribers <- channel_stats$numberSubscribers / 1000
channel_stats$numberViews <- channel_stats$numberViews / 1000
colnames(channel_stats) <- c('Name',
'Start day',
'Number of subscribers (in thousands)',
'Number of views (in thousands)',
'Total videos',
'Playlist ID',
'Country',
'Thumbnails',
'Engagement ratio')
# Create a Markdown-formatted table with a title
table_channel_stats <-  kbl(t(channel_stats[,-6]), caption = "Channel information:") %>%
kable_classic(full_width = F, html_font = "Cambria")
return(table_channel_stats)
}
display_channel_info(channel_stats)
devtools::load_all(".")
Get_Video_Detail()
Get_Video_Detail("Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
Extract_Time_in_mins("PT1H30S")
use_testthat()
devtools::uses_testthat()
devtools::use_testthat()
install.packages("testthat")
library(testthat)
devtools::load_all(".")
Extract_Time_in_mins("PT1H30S")
et_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
use_testthat
use_testthat()
library(testthat)
Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
use_testthat()
test_that()
Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
test_that()
install.packages("usethis")
install.packages("usethis")
library(usethis)
Extract_Time_in_mins<-function(input)
devtools::load_all(".")
library(usethis)
Extract_Time_in_mins("PT1H30S")
Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc", "AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
use_testthat()
use_test()
Get_Video_Category(" ", "")
library(usethis)
devtools::load_all(".")
use_testthat()
testthat()
testthat
use_test()
use_test()
Get_Video_Detail("", " "
)
Get_Video_Detail(NULL,NULL)
Get_Video_Detail(" "," ")
Get_Video_Detail()
Get_Video_Detail()
get_top10_videos("UCtYLUTtgS3k1Fg4y5tAhLbw")

