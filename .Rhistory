{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
print(paste0(h,":",m,":",s))
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id : id of a video or comma seperated ids of a video
#' @param api_key: api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples url: https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=[videoid(s)]&key=[key]
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#testing1
Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
print(url)
category_detail <- fromJSON(content(response, "text"))
print(category_detail)
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
print(categoryId)
print(categoryTitle)
print(channelId)
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
print(data)
}
Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
#testing2
Get_Video_Category("22","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c
(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame
(
categoryId = categoryId,
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
df = Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
df = Get_Video_Category("22","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#testing1
df = Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#testing2
df = Get_Video_Category("22","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
library(httr)
library(jsonlite)
#' Helps to Get Video Category details
#'
#' This method uses video category api, which accepts single or multiple category ids,
#' to get all the category details.
#' The output dataframe contains:
#' 1. categoryId
#' 2. categoryTitle
#' 3. channelId
#'
#' @param categoryid : It could be either single id or a comma seperated multiple ids
#' @param api_key : API key to authenticate the access
#' @return data frame with category details
#' @export
#' @examples url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=22&key=[api key]
#'           url : https://youtube.googleapis.com/youtube/v3/videoCategories?part=snippet&id=20,22&key=[api key]
Get_Video_Category <- function(categoryid, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videoCategories",
"?part=snippet",
"&id=",categoryid,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
category_detail <- fromJSON(content(response, "text"))
categoryId = category_detail$items$id
categoryTitle = category_detail$items$snippet$title
channelId =     category_detail$items$snippet$channelId
data <- data.frame(
categoryId = categoryId,
categoryTitle = categoryTitle,
channelId = channelId
)
return(data)
}
Get_Video_Category("22,20","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
library(httr)
library(jsonlite)
library(stringr)
#' Helps to Extract Time in minutes
#' The YouTube time period follows ISO 8601 time that looks like PT1H45M35S
#' This method helps to extract time from above mentioned format to minutes
#' For instance:
#' PT1H30M30S is converted to 90.5 minutes using regex
#'
#' @param input : time in ISO 8601 format
#' @return time in minutes
#' @export
#' @examples PT1H30M30S is Period of Time 1 Hour, 30 Minutes and 30 Seconds
Extract_Time_in_mins<-function(input)
{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
print(paste0(h,":",m,":",s))
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id : id of a video or comma seperated ids of a video
#' @param api_key: api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples url: https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=[videoid(s)]&key=[key]
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
source("~/YTExploreR/R/video_category_util.R")
library(httr)
library(jsonlite)
library(stringr)
#' Helps to Extract Time in minutes
#' The YouTube time period follows ISO 8601 time that looks like PT1H45M35S
#' This method helps to extract time from above mentioned format to minutes
#' For instance:
#' PT1H30M30S is converted to 90.5 minutes using regex
#'
#' @param input : time in ISO 8601 format
#' @return time in minutes
#' @export
#' @examples PT1H30M30S is Period of Time 1 Hour, 30 Minutes and 30 Seconds
Extract_Time_in_mins<-function(input)
{
pattern<-"((\\d+)H)?((\\d+)M)?((\\d+)S)?"
matches <- str_match_all(input, pattern)
h <- matches[[1]][3, 3]
m <- matches[[1]][3, 5]
s <- matches[[1]][3, 7]
if(is.na(h)){h<-0}
if(is.na(m)){m<-0}
if(is.na(s)){s<-0}
print(paste0(h,":",m,":",s))
return ((as.numeric(h)*60)+as.numeric(m)+(as.numeric(s)/60))
}
#' Helps to get video details
#' All the essential details about a video or videos can be extracted from this method
#' This method supports single and multiple videos.
#' This method gives details such as:
#' 1. channelId
#' 2. videoID
#' 3. video Title
#' 4. published At
#' 5. publishedmonth
#' 6. categoryid
#' 7. duration
#' 8. definition
#' 9. views
#' 10.likes
#' 11.favourites
#' 12.comments
#'
#' @param video_id : id of a video or comma seperated ids of a video
#' @param api_key: api key to authenticate API
#'
#' @return data frame with details about the video
#' @export
#'
#' @examples url: https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=[videoid(s)]&key=[key]
Get_Video_Detail <- function(video_id, api_key)
{
url <- paste0("https://youtube.googleapis.com/youtube/v3/videos",
"?part=snippet%2CcontentDetails%2Cstatistics",
"&id=",video_id,
"&key=", api_key)
headers <- c(
"Authorization" = "Bearer AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c",
"Accept" = "application/json"
)
response <- GET(url, headers = headers)
video_detail <- fromJSON(content(response, "text"))
channelId = video_detail$items$snippet$channelId
channelName = video_detail$items$snippet$channelTitle
videoID = video_detail$items$id
videotitle = video_detail$items$snippet$title
publishedAt = video_detail$items$snippet$publishedAt
categoryid = video_detail$items$snippet$categoryId
duration = video_detail$items$contentDetails$duration
duration = Extract_Time_in_mins(duration)
definition = video_detail$items$contentDetails$definition
views =  video_detail$items$statistics$viewCount
likes = video_detail$items$statistics$likeCount
favourites = video_detail$items$statistics$favoriteCount
comments = video_detail$items$statistics$commentCount
publishedAt = as.POSIXlt(publishedAt, format = "%Y-%m-%dT%H:%M:%SZ")
publishedmonth <- format(publishedAt, "%B")
publishedyear <- format(publishedAt, "%Y")
data <- data.frame(
channelId = channelId,
videoID = videoID,
videotitle = videotitle,
publishedAt = publishedAt,
publishedmonth = publishedmonth,
publishedyear = publishedyear,
categoryid = categoryid,
duration = duration,
definition = definition,
views = views,
likes = likes,
favourites = favourites,
comments = comments
)
return(data)
}
df<-Get_Video_Detail("Ks-_Mh1QhMc,Ks-_Mh1QhMc","AIzaSyBqrBJzAuitb-PpfyPrV7ABbLn8_nIbK3c")
df
#' Title
#'
#' @param channelid
#'
#' @return
#' @export
#'
#' @examples
#' @include YTExploreR_get_uploads.R
get_top10_videos<-function(channelid)
{
videos = get_uploads(channelid)
print(videos)
}
get_top10_videos("UCtYLUTtgS3k1Fg4y5tAhLbw")
devtools::build()
devtools::build()
usethis::use_roxygen_md()
devtools::build()
